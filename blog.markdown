---
layout: page
title: Blog
permalink: /blog/
---

<h1>25 thuật ngữ bạn nên biết khi lập trình web:</h1>
<ol>
<li style="font-weight: 400;"><b>AJAX</b><span style="font-weight: 400;">: viết tắt cho cụm “Asynchronous JavaScript and XML” (JavaScript và HTML không đồng bộ): công nghệ giúp giúp tạo ra những trang Web động mà không phải reload lại trang, giúp tác vụ chạy mượt và đẹp hơn.</span></li>
<li style="font-weight: 400;"><a target="_blank" href="https://topdev.vn/blog/api-la-gi/"><b>API</b></a><b>:</b><span style="font-weight: 400;"> viết tắt của cụm từ “Application Programming Interface” (Giao diện lập trình ứng dụng): phương thức, giao thức kết nối với các thư viện và ứng dụng khác. Ngoài ra, API cung cấp khả năng truy xuất đến một tập các hàm hay dùng, từ đó có thể trao đổi dữ liệu giữa các ứng dụng.</span></li>
<li style="font-weight: 400;"><b>Native API</b><span style="font-weight: 400;">: native API là một tính năng tích hợp có sẵn trong môi trường lập trình. Ví dụ: </span><span style="font-weight: 400;">document.querySelector() </span><span style="font-weight: 400;">đuợc gọi là native API để chọn các phần tử HTML (HTML elements)</span></li>
<li style="font-weight: 400;"><b>Browser console</b><span style="font-weight: 400;">: bạn có thể truy cập vào developer toolbox với một số trình duyệt web. Với Firefox và Chrome trên Mac, nhấm tổ hợp phím Command + Option + I, trên Linux (hoặc Windows nếu mình nhớ không nhầm) là phím F12. Sau đó màn hình interactive console có thể gõ và thực hiện lệnh JavaScript. Console này cũng sẽ chỉ ra các lỗi và cảnh báo khác từ chương trình JavaScript.</span></li>
<li style="font-weight: 400;"><b>Debugger</b><span style="font-weight: 400;">: là công cụ được xây dựng giúp dev tìm ra lỗi và chỗ nào chương trình ngưng hoạt động. JavaScript cũng có hướng dẫn debugger dừng đúng ở câu lệnh có lỗi.</span></li>
<li style="font-weight: 400;"><b>Browser API hay Web API:</b><span style="font-weight: 400;"> giống như native APIs, Web API là tính năng cụ thể có sẵn trên trình duyệt web, và dev có thể sử dụng ngay lập tức sau vài buớc cài đặt đơn giản. Ví dụ như</span><span style="font-weight: 400;">  setTimeout, setInterval, console.log. </span><span style="font-weight: 400;">Xem thêm full list Web APIs.</span></li>
<li style="font-weight: 400;"><b>ECMAScript</b><span style="font-weight: 400;">: là tên chính thức của JavaScript. JavaScript sau đó vào năm 1996 được tiêu chuẩn hóa bởi ECMA, một tổ chức chuyên về tiêu chuẩn hóa các ngành công nghệ và hệ thống.</span></li>
<li style="font-weight: 400;"><b>ES5</b><span style="font-weight: 400;">: đồng nghĩa với ECMAScript 2009, là phiên bản thứ 5 của JavaScript. Nhằm tránh nhầm lẫn, người ta hay sử dụng cú pháp “ECMAScript + năm” để xác định phiên bản JavaScript mình muốn đề cập.</span></li>
<li style="font-weight: 400;"><b>ES6</b><span style="font-weight: 400;">: viết tắt của ECMAScript 2015, phiên bản thứ 6 của JavaScript. Từ năm 2015, JavaScript committee quyết định sẽ cho ra mắt các tính năng mới hằng năm. Từ đó, ECMAScript 2016, ECMAScript 2017, ECMAScript 2018 lần lượt ra đời.</span></li>
<li style="font-weight: 400;"><a target="_blank" href="https://topdev.vn/blog/hieu-hon-ve-cach-hoat-dong-cua-javascript-engine/"><b>JavaScript engine</b><span style="font-weight: 400;">: </span></a><span style="font-weight: 400;">là một phần của browser và có khả năng biên dịch (compile) và phiên dịch (interpret) JavaScript code. </span><span style="font-weight: 400;">JavaScript engine đọc các đoạn code JavaScript rồi chuyển nó sang mã máy để máy tính (hoặc phần mềm máy tính như trình duyệt web, server node.js…) có thể hiểu và chạy được.</span></li>
<li style="font-weight: 400;"><b>JavaScript specification</b><span style="font-weight: 400;">: là </span><span style="font-weight: 400;">bản mô tả chức năng cho ECMAScript. Trong mỗi ấn bản này, người ta định nghĩa các tính năng của ngôn ngữ lập trình ECMAScript theo một cách viết rất hàn lâm, với hàng đống những thuật ngữ khoa học. Loại tài liệu academic này chắc chắn không hợp khẩu vị của đa số JavaScript developer, nhưng lại rất quan trọng đối với các nhóm phát triển web browser và JavaScript engine. Họ sẽ tham khảo đặc tả và lần lượt tích hợp chức năng vào sản phẩm của họ.</span></li>
<li style="font-weight: 400;"><span style="font-weight: 400;"> </span><b>Node.js</b><span style="font-weight: 400;">: là môi trường chạy JavaScript bên ngoài browser, bao gồm JavaScript engine và V8 để compile và execute đoạn code. </span><span style="font-weight: 400;">Nodejs không chạy trên một trình duyệt mà chạy trên Server.</span></li>
<li style="font-weight: 400;"><a target="_blank" href="https://topdev.vn/blog/npm-la-gi/"><b>Node package manager</b></a><span style="font-weight: 400;">: viết tắt là npm, là một công cụ tạo và quản lý các thư viện lập trình Javascript cho </span><a target="_blank" href="https://nodejs.org/"><span style="font-weight: 400;">Node.js</span></a><span style="font-weight: 400;">. Trong cộng đồng Javascript, các lập trình viên chia sẻ hàng trăm nghìn các thư viện với các đoạn code đã thực hiện sẵn một chức năng nào đó. Nó giúp cho các dự án mới tránh phải viết lại các thành phần cơ bản, các thư viện lập trình hay thậm chí cả các </span><a target="_blank" href="https://topdev.vn/blog/framework-la-gi/"><span style="font-weight: 400;">framework</span></a><span style="font-weight: 400;">.</span></li>
<li style="font-weight: 400;"><b>HTTP request</b><span style="font-weight: 400;">: hay còn gọi là thông báo yêu cầu được gửi từ client đến server, để yêu cầu server làm việc gì đó. Ví dụ như khi bạn đang ở trang web từ trình duyệt. Trang web này ngược lại có thể yêu cầu HTTP request để lấy dữ liệu, hầu hết là về REST APIs. (xem thêm bên dưới).</span></li>
<li style="font-weight: 400;"><b>HTTP error</b><span style="font-weight: 400;">: một số lỗi thường gặp với web services và server trả về các error cùng với các mã số quen thuộc như: 500 (server error), 404 (not found), 403 (forbidden), ..</span></li>
<li style="font-weight: 400;"><a target="_blank" href="https://topdev.vn/blog/json-la-gi/"><b>JSON</b></a><b>:</b><span style="font-weight: 400;"> viết tắt cho cụm từ JavaScript Object Notation, là một kiểu định dạng dữ liệu tuân theo một quy luật nhất định mà hầu hết các ngôn ngữ lập trình hiện nay đều có thể đọc được. JSON là một tiêu chuẩn mở để trao đổi dữ liệu trên web.</span></li>
<li style="font-weight: 400;"><b>REST API</b><span style="font-weight: 400;">: REST là một dạng chuyển đổi cấu trúc dữ liệu, API là giao diện lập trình ứng dụng giúp tạo ra các phương thức kết nối với các thư viện và ứng dụng khác nhau. REST API là một ứng dụng chuyển đổi cấu trúc dữ liệu có các phương thức để kết nối với các thư viện và ứng dụng khác. REST API không được xem là một công nghệ, nó là một giải pháp để tạo ra các ứng dụng web services thay thế cho các kiểu khác như SOAP, WSDL (Web Service Definition Language),…</span></li>
<li style="font-weight: 400;"><b>Transpiler</b><span style="font-weight: 400;">: những trình duyệt cũ không hỗ trợ cú pháp JavaScript mới từ phiên bản ECMAScript 2015 trở về sau. Lúc này, transpiler sẽ có nhiệm vụ biên dịch cú pháp JavaScript mới thành các phiên bản tương thích (như ECMAScript 2009).</span></li>
<li style="font-weight: 400;"><b>Proposal</b><span style="font-weight: 400;">: sự phát triển JavaScript được thông qua bởi hội đồng TC39. Thành viên từ nhóm này có thể đề xuất proposal để cải thiện hay thêm một số tính năng cho ngôn ngữ này. Proposal là một văn bản đặc tả viết bằng ngôn ngữ học thuật, mô tả những tính năng mới và cách áp dụng trong JavaScript.</span></li>
<li style="font-weight: 400;"><b>Stage N</b><span style="font-weight: 400;">: một bản JavaScript proposal sẽ bắt đầu với Stage 0. Càng nhận được nhiều đồng thuận từ hội đồng TC39, bản proposal càng có nhiều lợi thế ở những giai đoạn sau: 1, 2, 3 và 4. “Stage 1” hay “stage 2” chỉ giai đoạn của bản proposal đó. Nếu bản proposal đang ở “stage 2” thì nó đang tiến triển khá tốt và có khả năng được duyệt vào giai đoạn tiếp theo. Giai đoạn kết thúc là stage 4, đồng nghĩa với việc tính năng mới sẽ được áp dụng vào ngôn ngữ này.</span></li>
<li style="font-weight: 400;"><b>Vanilla JavaScript</b><span style="font-weight: 400;">: là cách gọi của những ứng dụng JavaScript “nguyên thủy”, ví dụ như những ứng dụng không cần đến sự trợ giúp của frontend library như React, Vue hay Angular.</span></li>
<li style="font-weight: 400;"><b>XMLHttpRequest</b><span style="font-weight: 400;">: XMLHttpRequest được thiết kế để đọc nguồn dữ liệu từ URL một cách đồng bộ (synchronous) hoặc không đồng bộ (asynchronous). Đọc dữ liệu một cách không đồng bộ giúp người dùng vẫn có thể thao tác với trình duyệt trong quá trình XMLHttpRequest đang đọc nguồn dữ liệu từ xa. XMLHttpRequest là một phần của “gia phả” AJAX, được sử dụng để thực hiện việc toàn bộ quy trình trao đổi thông tin giữa trình duyệt (máy khách) và máy chủ mà không yêu cầu phải tải lại trang.</span></li>
<li style="font-weight: 400;"><b>FetchAPI</b><span style="font-weight: 400;">: </span><span style="font-weight: 400;">là một API đơn giản cho việc gửi và nhận request bằng js. Với fetch thì việc thực hiện các yêu cầu web và xử lý phản hồi dễ dàng hơn so với XMLHttpRequest cũ, nó khá tương đồng với XMLHttpRequest nhưng cải tiến hơn và được xây dựng dựa trên ECMAScript 2015 Promises.</span></li>
<li style="font-weight: 400;"><a target="_blank" href="https://topdev.vn/blog/cors-la-gi/"><b>CORS</b></a><span style="font-weight: 400;">: viết tắt cho Cross-Origin Resource Sharing, CORS là một cơ chế cho phép nhiều tài nguyên khác nhau (fonts, Javascript, v.v…) của một trang web có thể được truy vấn từ domain khác với domain của trang đó. Xem thêm cách sử dụng CORS tại đây.</span></li>
<li style="font-weight: 400;"><a target="_blank" href="https://topdev.vn/blog/socket-la-gi-websocket-la-gi/"><b>WebSocket</b><span style="font-weight: 400;">:</span></a><span style="font-weight: 400;"> là một giao thức giúp truyền dữ liệu hai chiều giữa server-client qua một kết nối TCP duy nhất. Không giống với giao thức HTTP là cần client chủ động gửi yêu cầu cho server, client sẽ chờ đợi để nhận được dữ liệu từ máy chủ. Hay nói cách khác với giao thức Websocket thì server có thể chủ động gửi thông tin đến client mà không cần phải có yêu cầu từ client.</span></li>
</ol>
<p><span style="font-weight: 400;">Trên đây là 25 web terms thường gặp nhất. Hy vọng sẽ giúp các bạn có thêm thông tin trong quá trình tìm hiểu về web development nhé.</span></p>
